package org.sealoflove.euler.zero.four;

import java.util.HashSet;
import java.util.Set;


import org.sealoflove.euler.Task;

public class Task044 implements Task {

	/*Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/
	
	
	private static long p(long n) {	return n * (3 * n - 1) / 2;	}

	
	private static boolean isPent(long n) {
		long val = new Double(Math.sqrt(24*n + 1)).longValue();
		if ((val * val != 24*n + 1) || (val % 6 != 5))
			return false;
		return true;
	}
	
	
	private Long findMinD(long limit) {
		boolean growing = false;
		Long min = null;
		int i = 1;
		Set<Long> pents = new HashSet<Long>();
		Long newD = null;
		Long oldD = null;
		while (!growing && p(i) < limit) {
			long newpent = p(i);
			i++;
			for (Long cand : pents) {
				if (isPent(newpent - cand) && isPent(newpent + cand)) {
					System.out.println(String.format("%d, %d", newpent, cand));
					if (min == null || min > newpent - cand) {
						min = newpent - cand;
					}
					newD = newpent - cand;
					if (oldD != null) {    
						growing = oldD < newD;
					}
					oldD = newD;
				}
			}
			pents.add(newpent);

		}
		return min;
	}
	
	
	long limit = 100000000;
	
	@Override
	public String getResult() {
		return String.format("%d", findMinD(this.limit));
	}

}
